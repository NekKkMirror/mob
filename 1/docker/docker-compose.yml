version: '3.8'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '${DB_PORT}:${DB_PORT}'
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  migrations-service:
    build:
      context: ../services/migrations-service
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ../services/migrations-service:/app
      - ../services/inventory-service/node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: npm run migrate

  inventory-service:
    build:
      context: ../services/inventory-service
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      KAFKA_BROKER: kafka:9092
      PORT: ${INVENTORY_PORT}
      NODE_ENV: ${NODE_ENV}
    ports:
      - '${INVENTORY_PORT}:${INVENTORY_PORT}'
    volumes:
      - ../services/inventory-service/:/app
      - ../services/inventory-service/node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - app-network
    command: npm run dev

  history-service:
    build:
      context: ../services/history-service
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      KAFKA_BROKER: kafka:9092
      PORT: ${HISTORY_PORT}
      NODE_ENV: ${NODE_ENV}
    ports:
      - '${HISTORY_PORT}:${HISTORY_PORT}'
    volumes:
      - ../services/history-service/:/app
      - ../services/history-service/node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - app-network
    command: npm run dev

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_started
      zookeeper:
        condition: service_started
    networks:
      - app-network

networks:
  app-network: